import time
import sys
import os
import socket
import hmac
from struct import pack, unpack_from
import json
import base64

DEFAULT_NAME = '.dstu-agent.sock'
TYPES = {
    0x04: 'octstr',
    0x13: 'printstr',
    'printstr': 0x13,
    'octstr': 0x04
}


class OperationError(Exception):
    def __init__(self, code):
        self.code = code


class ProtocolError(Exception):
    pass


def encode_len(type_name, byte_len):
    type_code = TYPES[type_name]
    if byte_len < 0x80:
        return pack('BB', type_code, byte_len)
    if byte_len < 0x100:
        return pack('BBB', type_code, 0x81, byte_len)

    if byte_len < 0x10000:
        return pack('BBBB', type_code, 0x82, byte_len >> 8, byte_len & 0xFF)

    if byte_len < 0x1000000:
        return pack('BBBBB', type_code, 0x83, byte_len >> 16, (byte_len >> 8) & 0xFF, byte_len & 0xFF)

    raise ProtocolError('Length is too big {}'.format(byte_len))


def read_header(read):
    (typ_code, byte_len) = unpack_from('BB', read(2))
    if (byte_len & 0x80) > 0:
        oct_len = byte_len ^ 0x80
        byte_len = 0
        off = 2
        while oct_len > 0:
            byte_len = byte_len << 8
            (len_byte,) = unpack_from('B', read(1))
            oct_len = oct_len - 1
            byte_len = byte_len | len_byte

    return (TYPES.get(typ_code), byte_len)


CONTROL_LEN = 32


class Connection:
    def __init__(self, socket, key):
        self.socket = socket
        self.key = key
        self.ohmac = hmac.new(key, digestmod='sha256')
        self.ihmac = hmac.new(key, digestmod='sha256')

    def reset_ohmac(self):
        digest = self.ohmac.digest()
        self.ohmac = hmac.new(self.key, digestmod='sha256')
        self.ohmac.update(digest)
        return digest

    def reset_ihmac(self):
        digest = self.ihmac.digest()
        self.ihmac = hmac.new(self.key, digestmod='sha256')
        self.ihmac.update(digest)
        return digest

    def command(self, type_name, buf):
        header = encode_len(type_name, len(buf))
        self.ohmac.update(header)
        self.ohmac.update(buf)
        self.socket.send(header)
        self.socket.send(buf)
        self.socket.send(self.reset_ohmac())

    def read_type(self):
        def read(count):
            ret = b''
            while count > 0:
                part = self.socket.recv(count)
                self.ihmac.update(part)
                count -= len(part)
                ret += part
            return ret

        (type_name, byte_len) = read_header(read)
        data = read(byte_len)
        # control = self.socket.recv(CONTROL_LEN)
        control = b''
        while len(control) < CONTROL_LEN:
            control += self.socket.recv(CONTROL_LEN - len(control))

        dgst = self.reset_ihmac()
        if not hmac.compare_digest(control, dgst):
            raise ProtocolError('HMAC')

        return (type_name, data)


def command_json(cn, data):
    return cn.command('printstr', json.dumps(data).encode('utf8'))


def send_content(cn, data):
    return cn.command('octstr', data)


def read_json(cn, expect_op):
    type_name, response_body = cn.read_type()
    # print(type_name, response_body)
    if type_name != 'printstr':
        raise ProtocolError('Unexpected data response, expect json')
    data = json.loads(response_body.decode('utf8'))
    if data['op'] == 'ERROR':
        raise OperationError(data['code'])
    if data['op'] != expect_op:
        raise ProtocolError('Unexpected response op', data['op'])

    return data


def read_data(cn):
    type_name, response_body = cn.read_type()
    if type_name == 'printstr':
        data = json.loads(response_body.decode('utf8'))
        if data['op'] == 'ERROR':
            raise OperationError(data['code'])
        else:
            raise ProtocolError('Unexpected json response, expected data', data['op'])

    return response_body


def info(cn, bid):
    command_json(cn, {'op': 'INFO', 'bid': bid})
    certs = read_json(cn, 'CERTS')
    read_json(cn, 'READY')
    return certs['certs']


def pipe(cn, bid, content, pipe):
    send_content(cn, content)
    command_json(cn, {"op": "PIPE", "pipe": pipe, 'bid': bid})
    response = read_data(cn)
    read_json(cn, 'RPIPE')
    return response

def opts(cn, bid, content, pipe, headers):
    send_content(cn, content)
    command_json(cn, {"op": "PIPE", "pipe": pipe, 'bid': bid, "opts": headers})
    response = read_data(cn)
    read_json(cn, 'RPIPE')
    return response


def unwrap(cn, bid, content, ocsp=None, tsp=None):
    send_content(cn, content)
    command_json(cn, {"op": "UNWRAP", 'bid': bid, 'opts': {'ocsp': ocsp, 'tsp': tsp}})
    response = read_data(cn)
    meta = read_json(cn, 'META')
    return (response, meta)

def decrypt(cn, bid, content, ocsp=None, tsp=None):
    send_content(cn, content)
    command_json(cn, {"op": "DECRYPT", 'bid': bid})
    response = read_data(cn)
    meta = read_json(cn, 'META')
    return (response, meta)


def init_box(cn):
    command_json(cn, {"op": "INIT"})
    return read_json(cn, 'CREATED')['bid']


def evict_box(cn, bid):
    command_json(cn, {"op": "EVICT", 'bid': bid})
    return read_json(cn, 'GONE')


def add_key(cn, bid, contents, password=None):
    send_content(cn, contents)
    command_json(cn, {"op": "ADD_KEY", 'password': password, 'bid': bid})
    read_json(cn, 'DONE')


def add_cert(cn, bid, contents):
    send_content(cn, contents)
    command_json(cn, {"op": "ADD_CERT", 'bid': bid})
    read_json(cn, 'DONE')


def unpack_key(cn, contents, password):
    send_content(cn, contents)
    command_json(cn, {"op": "UNPROTECT", 'password': password})
    ret = read_json(cn, 'CLEAR')
    return ret['keys']


def read_key1(path, password):
    with open(path, 'rb') as key_file:
        return {'password': password, 'contents': key_file.read()}


def read_certs(certpath1, certpath2):
    with open(certpath1, 'rb') as cert_file:
        cert1 = cert_file.read()

    with open(certpath2, 'rb') as cert_file:
        cert2 = cert_file.read()

    return [cert1, cert2]


def connect(mode='unix', path='', key=None):
    if mode == 'unix':
        home = os.getenv('HOME', '/tmp/')
        default_path = os.path.join(home, DEFAULT_NAME)
        s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM);
        s.connect(path or default_path)
    elif mode == 'ip6':
        s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
        (host, port) = path.rsplit(':') if (':' in path and not path.startswith('[')) else (None, path)
        s.connect((host or '::', int(port) if port else 3111))
    elif mode == 'ip4':
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        (host, port) = path.rsplit(':') if (':' in path) else (None, path)
        s.connect((host or '127.0.0.1', int(port) if port else 3111))

    else:
        return sys.exit(1)

    cn = Connection(s, bytes.fromhex(key) if key else (b'\x00' * 32))

    # bid1 = 'ca06e915fb7f4f85effe60cbe4114f6b0f9870d8ea5e6b61f6f667d57a43723e'
    # data_test = b'{"Command": "ServerState"}'
    #
    # sdata = pipe(cn, bid1, data_test, [{"op": "sign", "role": "stamp"}])
    # # print('w', sdata)
    # (rdata, meta) = unwrap(cn, bid1, sdata, ocsp=None)
    # print('r', repr(rdata))
    # print(meta)

    key_path = './test-keys/Magnat/Magnat_1314.dat'
    password = '1314'
    keys = unpack_key(cn, **read_key1(key_path, password))
    # print(keys)
    bid1 = init_box(cn)
    print(bid1)

    # exit()
    for key in keys:
        add_key(cn, bid1, key['contents'].encode('latin1'))
        # break

    certpath1 = './test-keys/Magnat/EU-58E2D9E7F900307B04000000C2B22F0052E38600_1.cer'
    certpath2 = './test-keys/Magnat/EU-58E2D9E7F900307B04000000C2B22F0053E38600_2.cer'

    for cert in read_certs(certpath1, certpath2):
        # print(cert)
        add_cert(cn, bid1, cert)
        # break

    data_test = b'<?xml version=\'1.0\' encoding=\'windows-1251\'?>\n<ZREP xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="check01.xsd">\n  <ZREPHEAD>\n    <UID>8bd266f2-28ba-11eb-8e51-0123be5354a8</UID>\n    <TIN></TIN>\n    <ORGNM></ORGNM>\n    <POINTNM></POINTNM>\n    <POINTADDR></POINTADDR>\n    <ORDERDATE>17112020</ORDERDATE>\n    <ORDERTIME>115203</ORDERTIME>\n    <ORDERNUM>385</ORDERNUM>\n    <CASHDESKNUM></CASHDESKNUM>\n    <CASHREGISTERNUM>4000042829</CASHREGISTERNUM>\n    <VER>1</VER>\n    <ORDERTAXNUM>1</ORDERTAXNUM>\n  </ZREPHEAD>\n  <ZREPVAL>\n    <TOTALINADVANCE>0.00</TOTALINADVANCE>\n    <TOTALINATTACH>0.00</TOTALINATTACH>\n    <TOTALSURRCOLLECTION>0.00</TOTALSURRCOLLECTION>\n    <COMMISSION>0.00</COMMISSION>\n    <CALCDOCSCNT>12</CALCDOCSCNT>\n    <ACCEPTEDN>0.00</ACCEPTEDN>\n    <ISSUEDN>0.00</ISSUEDN>\n    <COMMISSIONN>0.00</COMMISSIONN>\n    <TRANSFERSCNT>0</TRANSFERSCNT>\n    <DETAILS>\n      <ROW ROWNUM="1"><VALCD>840</VALCD><VALSYMCD>USD</VALSYMCD><BUYVALI>6.00</BUYVALI><SELLVALI>0.00</SELLVALI><BUYVALN>0.00</BUYVALN><SELLVALN>163.20</SELLVALN><STORBUYVALI>6.00</STORBUYVALI><STORSELLVALI>0.00</STORSELLVALI><STORBUYVALN>0.00</STORBUYVALN><STORSELLVALN>163.20</STORSELLVALN><CINVALI>0.00</CINVALI><COUTVALI>0.00</COUTVALI><COMMISSION>0.00</COMMISSION><INADVANCE>0.00</INADVANCE><INATTACH>0.00</INATTACH><SURRCOLLECTION>0.00</SURRCOLLECTION><STORCINVALI>0.00</STORCINVALI><STORCOUTVALI>0.00</STORCOUTVALI><STORCOMMISSION>0.00</STORCOMMISSION></ROW>\n    </DETAILS>\n  </ZREPVAL>\n  <ZREPBODY>\n    <SERVICEINPUT>0.00</SERVICEINPUT>\n    <SERVICEOUTPUT>0.00</SERVICEOUTPUT>\n  </ZREPBODY>\n</ZREP>\n'

    # sdata = pipe(cn, bid1, data_test, [{"op": "sign", "role": "stamp", "tsp": "signature", "tax": True}])
    # print('w', sdata)

    key247221_pem = '247221.pem'
    with open(key247221_pem, "r") as file:
        cert = file.read()
        # cert = base64.b64encode(cert).decode('latin1')
        # print(cert)

    # with open(certpath1, 'rb') as cert_file:
    #     cert1 = cert_file.read()

    # with open(certpath2, 'rb') as cert_file:
    #     cert2 = cert_file.read()

    # return [cert1, cert2]
    headers = {
        'CERTYPE': 'UA1',
        'RCV_NAME': 'test',
        'PRG_TYPE': 'TRANSPORT GATE',
        'PRG_VER': "1.0.0",
      #   SND_DATE: dateStr(),
      # FILENAME: filename || inputF,
      # EDRPOU: edrpou || ipn_ext.EDRPOU,
        }

    # sdata = opts(cn, bid1, data_test, [{"op": "sign", "role": "director", "tax": True},
    #                                                 {"op": "encrypt", "forCert": cert, "addCert": True, "tax": True}, {"op": "sign", "role": "director", "tax": True}], headers)
    # print('w', sdata)

    sdata = b'TRANSPORTABLE\x00I\x01\x00\x00FILENAME=26550039307260J1391801100000008410720212655.XML\r\nSUBJECT=\xca\xe2\xe8\xf2\xe0\xed\xf6\xb3\xff \xb91\r\nEDRPOU=43005393\r\nRCV_EDRPOU=39307260\r\nRESULT=0\r\nDOCRNN=9204614618\r\nFINKVT=1\r\nCNCODE=2565537963\r\nRCV_EMAIL=af.suport@gmail.com\r\nPRG_TYPE=ZPGATE\r\nPRG_VER=2030725\r\nSND_DATE=20210724195125\r\nENCODING=WIN\r\nKVTNUM=2\r\nDOC_TYPE=3\r\nSTTYPE=1\r\nCRC=3616238163\r\n\x00CERTCRYPT\x00\x9a\x06\x00\x000\x82\x06\x960\x82\x06>\xa0\x03\x02\x01\x02\x02\x14 \xb4\xe4\xed\r0\x99\x8c\x04\x00\x00\x00\x99Z,\x00\xaf\xd1x\x000\r\x06\x0b*\x86$\x02\x01\x01\x01\x01\x03\x01\x010\x82\x01U1T0R\x06\x03U\x04\n\x0cK\xd0\x86\xd0\xbd\xd1\x84\xd0\xbe\xd1\x80\xd0\xbc\xd0\xb0\xd1\x86\xd1\x96\xd0\xb9\xd0\xbd\xd0\xbe-\xd0\xb4\xd0\xbe\xd0\xb2\xd1\x96\xd0\xb4\xd0\xba\xd0\xbe\xd0\xb2\xd0\xb8\xd0\xb9 \xd0\xb4\xd0\xb5\xd0\xbf\xd0\xb0\xd1\x80\xd1\x82\xd0\xb0\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82 \xd0\x94\xd0\xa4\xd0\xa11^0\\\x06\x03U\x04\x0b\x0cU\xd0\xa3\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x96\xd0\xbd\xd0\xbd\xd1\x8f (\xd1\x86\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80) \xd1\x81\xd0\xb5\xd1\x80\xd1\x82\xd0\xb8\xd1\x84\xd1\x96\xd0\xba\xd0\xb0\xd1\x86\xd1\x96\xd1\x97 \xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd1\x96\xd0\xb2 \xd0\x86\xd0\x94\xd0\x94 \xd0\x94\xd0\xa4\xd0\xa11b0`\x06\x03U\x04\x03\x0cY\xd0\x90\xd0\xba\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb8\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb9 \xd1\x86\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80 \xd1\x81\xd0\xb5\xd1\x80\xd1\x82\xd0\xb8\xd1\x84\xd1\x96\xd0\xba\xd0\xb0\xd1\x86\xd1\x96\xd1\x97 \xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd1\x96\xd0\xb2 \xd0\x86\xd0\x94\xd0\x94 \xd0\x94\xd0\xa4\xd0\xa11\x190\x17\x06\x03U\x04\x05\x0c\x10UA-39384476-20181\x0b0\t\x06\x03U\x04\x06\x13\x02UA1\x110\x0f\x06\x03U\x04\x07\x0c\x08\xd0\x9a\xd0\xb8\xd1\x97\xd0\xb20\x1e\x17\r190822210000Z\x17\r210822210000Z0\x81\xda1H0F\x06\x03U\x04\n\x0c?\xd0\x94\xd0\xb5\xd1\x80\xd0\xb6\xd0\xb0\xd0\xb2\xd0\xbd\xd0\xb0 \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb0\xd1\x82\xd0\xba\xd0\xbe\xd0\xb2\xd0\xb0 \xd1\x81\xd0\xbb\xd1\x83\xd0\xb6\xd0\xb1\xd0\xb0 \xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd0\xb81\\0Z\x06\x03U\x04\x03\x0cS\xd0\x94\xd0\xb5\xd1\x80\xd0\xb6\xd0\xb0\xd0\xb2\xd0\xbd\xd0\xb0 \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb0\xd1\x82\xd0\xba\xd0\xbe\xd0\xb2\xd0\xb0 \xd1\x81\xd0\xbb\xd1\x83\xd0\xb6\xd0\xb1\xd0\xb0 \xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd0\xb8. "\xd0\x9e\xd0\xa2\xd0\xa0\xd0\x98\xd0\x9c\xd0\x90\xd0\x9d\xd0\x9e"1\x100\x0e\x06\x03U\x04\x05\x0c\x0729067771\x0b0\t\x06\x03U\x04\x06\x13\x02UA1\x110\x0f\x06\x03U\x04\x07\x0c\x08\xd0\x9a\xd0\xb8\xd1\x97\xd0\xb20\x82\x01Q0\x82\x01\x12\x06\x0b*\x86$\x02\x01\x01\x01\x01\x03\x01\x010\x82\x01\x010\x81\xbc0\x0f\x02\x02\x01\xaf0\t\x02\x01\x01\x02\x01\x03\x02\x01\x05\x02\x01\x01\x046\xf3\xca@\xc6i\xa4\xda\x171I\xca\x12\xc3-\xae\x18kS\xack\xc66Y\x97\xde\xae\xae\x8a\xd2\xd8\x88\xf9\xbf\xd54\x01iN\xf9\xc4\'=\x8c\xfem\xc2\x8fpj\x0fI\x10\xce\x03\x026?\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xba1uE\x80\t\xa8\xc0\xa7$\xf0/\x81\xaa\x8a\x1f\xcb\xaf\x80\xd9\x0cz\x95\x11\x05\x04\xcf\x046|\x85|\x94\xc5C;\xfd\x99\x1e\x17\xc2&\x84\x06XP\xa9\xa2I\xed{\xc2I\xaeZN\x87\x86\x89\xf8r\xefz\xd5$\x08.\xc3\x03\x8e\x9a\xed\xe7\xbak\xa13\x81\xd9y\xbab\x1a\x04@\xa9\xd6\xebE\xf1<p\x82\x80\xc4\x96{#\x1f^\xad\xf6X\xeb\xa4\xc07)\x1d8\xd9k\xf0%\xcaN\x17\xf8\xe9r\r\xc6\x15\xb4:(\x97_\x0b\xc1\xde\xa3d8\xb5d\xea,\x17\x9f\xd0\x12>m\xb8\xfa\xc5y\x04\x039\x00\x046a\x80\x87\xf0\x8b\x9e9\xd3\xc0C\x1fX\xbb3\xa4\xce\x8f\xd1\x11\xd3\xba\x9e.R\xf1\xbf\xfc\xe7d\xce\xae\xf4_L\x82/\xd8^X0;5h\xf9\x85\x86P\xeed\xb7k`\xc2U\xa3\x82\x02e0\x82\x02a0)\x06\x03U\x1d\x0e\x04"\x04 \xad\x83\xa0\xc49\x86\\+q\xa3\x1d\xdc;o\x96\xef\xbc\x07TI$\xcaA\xa7~h\xc9\xb0\xe6\x81VB0+\x06\x03U\x1d#\x04$0"\x80  \xb4\xe4\xed\r0\x99\x8c\xbe0j\x07}i\x9a2s#\x8a\xe9\t\x08q\xd6\x167\x0e\x18\xe5v\xd4\x7f0\x0e\x06\x03U\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x03\x080\x19\x06\x03U\x1d \x01\x01\xff\x04\x0f0\r0\x0b\x06\t*\x86$\x02\x01\x01\x01\x02\x020\x0c\x06\x03U\x1d\x13\x01\x01\xff\x04\x020\x000\x1e\x06\x08+\x06\x01\x05\x05\x07\x01\x03\x01\x01\xff\x04\x0f0\r0\x0b\x06\t*\x86$\x02\x01\x01\x01\x02\x010\x1e\x06\x03U\x1d\x11\x04\x170\x15\xa0\x13\x06\n+\x06\x01\x04\x01\x827\x14\x02\x03\xa0\x05\x0c\x033840I\x06\x03U\x1d\x1f\x04B0@0>\xa0<\xa0:\x868http://acskidd.gov.ua/download/crls/CA-20B4E4ED-Full.crl0J\x06\x03U\x1d.\x04C0A0?\xa0=\xa0;\x869http://acskidd.gov.ua/download/crls/CA-20B4E4ED-Delta.crl0\x81\x8e\x06\x08+\x06\x01\x05\x05\x07\x01\x01\x04\x81\x810\x7f00\x06\x08+\x06\x01\x05\x05\x070\x01\x86$http://acskidd.gov.ua/services/ocsp/0K\x06\x08+\x06\x01\x05\x05\x070\x02\x86?http://acskidd.gov.ua/download/certificates/allacskidd-2018.p7b0?\x06\x08+\x06\x01\x05\x05\x07\x01\x0b\x043010/\x06\x08+\x06\x01\x05\x05\x070\x03\x86#http://acskidd.gov.ua/services/tsp/0%\x06\x03U\x1d\t\x04\x1e0\x1c0\x1a\x06\x0c*\x86$\x02\x01\x01\x01\x0b\x01\x04\x02\x011\n\x13\x08430053930\r\x06\x0b*\x86$\x02\x01\x01\x01\x01\x03\x01\x01\x03C\x00\x04@\x0ef\xc4\xda4\x12{\xd3\x82h@y\xf9\x82u\xdef\xe8o\x17\xdc\xcc\x11\x87\xba\xaa1\xc4\xce\x82WD\x1c\x18\xfa\xf48\x1fu\x13\xc0\xdb\xacJ\xed\x7f\x15\xd6\xdbw\xd1\x03\x9a\x07\x0e\x17\'\x98\xbbau\xab\xd9\rUA1_CRYPT\x00\x9e\x15\x00\x000\x82\x15\x9a\x06\t*\x86H\x86\xf7\r\x01\x07\x03\xa0\x82\x15\x8b0\x82\x15\x87\x02\x01\x021\x82\x03K\xa1\x82\x03G\x02\x01\x03\xa0\x82\x01s0\x82\x01o0\x82\x01U1T0R\x06\x03U\x04\n\x0cK\xd0\x86\xd0\xbd\xd1\x84\xd0\xbe\xd1\x80\xd0\xbc\xd0\xb0\xd1\x86\xd1\x96\xd0\xb9\xd0\xbd\xd0\xbe-\xd0\xb4\xd0\xbe\xd0\xb2\xd1\x96\xd0\xb4\xd0\xba\xd0\xbe\xd0\xb2\xd0\xb8\xd0\xb9 \xd0\xb4\xd0\xb5\xd0\xbf\xd0\xb0\xd1\x80\xd1\x82\xd0\xb0\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82 \xd0\x94\xd0\xa4\xd0\xa11^0\\\x06\x03U\x04\x0b\x0cU\xd0\xa3\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x96\xd0\xbd\xd0\xbd\xd1\x8f (\xd1\x86\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80) \xd1\x81\xd0\xb5\xd1\x80\xd1\x82\xd0\xb8\xd1\x84\xd1\x96\xd0\xba\xd0\xb0\xd1\x86\xd1\x96\xd1\x97 \xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd1\x96\xd0\xb2 \xd0\x86\xd0\x94\xd0\x94 \xd0\x94\xd0\xa4\xd0\xa11b0`\x06\x03U\x04\x03\x0cY\xd0\x90\xd0\xba\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb8\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb9 \xd1\x86\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80 \xd1\x81\xd0\xb5\xd1\x80\xd1\x82\xd0\xb8\xd1\x84\xd1\x96\xd0\xba\xd0\xb0\xd1\x86\xd1\x96\xd1\x97 \xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd1\x96\xd0\xb2 \xd0\x86\xd0\x94\xd0\x94 \xd0\x94\xd0\xa4\xd0\xa11\x190\x17\x06\x03U\x04\x05\x0c\x10UA-39384476-20181\x0b0\t\x06\x03U\x04\x06\x13\x02UA1\x110\x0f\x06\x03U\x04\x07\x0c\x08\xd0\x9a\xd0\xb8\xd1\x97\xd0\xb2\x02\x14 \xb4\xe4\xed\r0\x99\x8c\x04\x00\x00\x00\x99Z,\x00\xaf\xd1x\x00\xa1B\x04@\xa1\xbe5\x14\xcb\xa7\xbdNb\x8f#\xacX\xf8\x8b\xb6\x80\x0f\x82\xa3\x83\xfc\xca\xb2\x9dJk\x80\xb5\xd9$=q\x06_\x90-[\xcd\xb6\xe3\xa6*\x91\xc3dZ\xa8\xea\xce\x1c\xc3\xf8\x8c\xaf\x03dm\x0c-\xd8\x916\xe20\x1d\x06\n*\x86$\x02\x01\x01\x01\x01\x03\x040\x0f\x06\x0b*\x86$\x02\x01\x01\x01\x01\x01\x01\x05\x05\x000\x82\x01f0\x82\x01b0\x82\x0100\x82\x01\x161T0R\x06\x03U\x04\n\x0cK\xd0\x86\xd0\xbd\xd1\x84\xd0\xbe\xd1\x80\xd0\xbc\xd0\xb0\xd1\x86\xd1\x96\xd0\xb9\xd0\xbd\xd0\xbe-\xd0\xb4\xd0\xbe\xd0\xb2\xd1\x96\xd0\xb4\xd0\xba\xd0\xbe\xd0\xb2\xd0\xb8\xd0\xb9 \xd0\xb4\xd0\xb5\xd0\xbf\xd0\xb0\xd1\x80\xd1\x82\xd0\xb0\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82 \xd0\x94\xd0\x9f\xd0\xa11^0\\\x06\x03U\x04\x0b\x0cU\xd0\xa3\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x96\xd0\xbd\xd0\xbd\xd1\x8f (\xd1\x86\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80) \xd1\x81\xd0\xb5\xd1\x80\xd1\x82\xd0\xb8\xd1\x84\xd1\x96\xd0\xba\xd0\xb0\xd1\x86\xd1\x96\xd1\x97 \xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd1\x96\xd0\xb2 \xd0\x86\xd0\x94\xd0\x94 \xd0\x94\xd0\x9f\xd0\xa11#0!\x06\x03U\x04\x03\x0c\x1a\xd0\x9a\xd0\x9d\xd0\x95\xd0\x94\xd0\x9f - \xd0\x86\xd0\x94\xd0\x94 \xd0\x94\xd0\x9f\xd0\xa11\x190\x17\x06\x03U\x04\x05\x0c\x10UA-43174711-20191\x0b0\t\x06\x03U\x04\x06\x13\x02UA1\x110\x0f\x06\x03U\x04\x07\x0c\x08\xd0\x9a\xd0\xb8\xd1\x97\xd0\xb2\x02\x14X\xe2\xd9\xe7\xf9\x000{\x04\x00\x00\x00\xc2\xb2/\x00S\xe3\x86\x00\x04,#\xd6(\x991\xec\x86\xeek\x03\xb6\x12K\xc4\xbdc\xcex\xccx\xd1\xe4e/u?\xd2o\x17\xce>SK\xf0\xbe\xb0\x9e\x98p`\xcd\xfd~{0\x82\x121\x06\t*\x86H\x86\xf7\r\x01\x07\x010[\x06\x0b*\x86$\x02\x01\x01\x01\x01\x01\x01\x030L\x04\x08\x8c3(\xff\xee\x14\xe4\x8f\x04@\xa9\xd6\xebE\xf1<p\x82\x80\xc4\x96{#\x1f^\xad\xf6X\xeb\xa4\xc07)\x1d8\xd9k\xf0%\xcaN\x17\xf8\xe9r\r\xc6\x15\xb4:(\x97_\x0b\xc1\xde\xa3d8\xb5d\xea,\x17\x9f\xd0\x12>m\xb8\xfa\xc5y\x04\x80\x82\x11\xc5\xcc_\x83f\xce\x9e\xb1A\xb9\xc3\xd9Bj\x07\xc0\xd0NY\xe2^f\xdaEDD\xcf\x0c;\xddy\x9a\xde\xd8`\x9d\xe0<,\x8b{\x8a\xe2}/\x16\xceD\xa43\xd5\xb5\t\xce\x02Y\xd7\x9b\xc8\xd8\xf0j\xf9K\xb8^p>\x01\x96iJ\xc8^\xa7\xd3fa4\x9e\xd6\x9b\xe9n\x95:\xdfYaH\xb2\xa8\x01H\xe5\x0b\xec>\xc5unM\xadL\xec\xaa]R\x1d\xb7Iv\x9ff\xe1? 6\xbc\xd6\x8e\xad\x14\xb4\xfd\xdc\x9aM1\xb6KAj\x11\xee\xfb\xde\x9bP\x8f\xa1)\xd2G\xd9\xa5*o\xc0\xa2h\xac:\x1e\xc7\x83P\x91\x97?c7\x88\xfc\xc0m\xde\x06\xf7f!~\xc3Jdz\x11k\x9c\xb6|\n*\x0e\x8eb\xbb\xc0L\xec\xc9%[jfm\xc8\xcd\x90\xb5d{\xcc\xe6Q\'/\x083\xd5\x82\xabn\xf8w\xc7\x88h\x1b\\\x00u\xbe\xe9\xa7F\x8a\r\xec\xff\x0fD\xd8\xc1\xc3\\\x97\xe0\xb2&W\xcf\x9c\xe4\xc5\xec$;\x1f\xf2[\x07v\xe2\xfc4_\xb3\x89\xd0\x05\x0c\x1aK\xbd\x17\x94\x88\x99\x95\x9b|O\x95.I\xe6\x11\xc3F\x940\xec|\xc8\x89\n\xdf7\xbd\xb3\x1d%\x03x\xeb=\xdeLQ*\x0c?s\x8c$\x87\xa3\x14h\x9e\x8c\x8b\xf0\xab\xee\x83n\x19\x94\xad\xe8\xf4@\\5}\xaf}$\r\\\xdf"\x141a\xc6O\x87\xdd\x05\xfc:\xf3\xe9\xb0\xce\xa0\xb1\x9b\x85e\xd4\x16\x1b\x06*`\xc3\x08+\xa7XH\xee\x07\xd5l\xa5\x88?\x9enb\xc6>\xd9L\xbb~\t\x9e\x91\xbd\xe98\x7f\x85\x0b+M\x7fR\x9d\xbev\xdd\xe3j\xc9\xfd\xa7\x82\xda\x8f\x86\x9c\xd3\xdeI\xad/\xb0\xa3`\x91\x9b\xce\x13P\xda\x1a0\xebQ\xccAN\x886[}d\x1b0T\xb5\xc7\xbb`g\xd1Xu\x9elQ\xe6\x1b\x97\xd0\x98\xdbj\xdfU\xbai\xde\\\x07S`\xaaf\xcet\x8e\x1d$\x1a\xd3\xe9\xa7kNC \x82\x95\xa3\x05\xd98@g\xdb=R\x0f\x86\xaa\xfb\xb0\xf51\x93\x83\xa8\xc2OtM~\x05\xd1\xde\xdb\x9a>\xbd\x07\r\\\x02\xbc\xad\x02\xad\x1d\xdc\xd04\xe2\xca\x8fR\xe8x29L\x10\xdd\xbe\xb5\xce\x7f\x89\xb4\xc8\x8eh\xa4\x8c\xd7,\x9a\x00\xfe\x83\'\xe5\xe8\x1d\x11=QZ\x92\xa9\xf8m\x85\x1d\x18\x95,"\xd7M\x96\xfcx\t\xa9\xd3\x9c`\xe8|\x08c\x07F\x0b&R\x9eV\x02A\xaa\x99\xc5\x04\x05\xafU1\xdf\xf4\x87\xaff\x9d\xf2\xd5H\x05\xe4\xab\xe2N\xfe\x8f\xb8k\x10\xac\xbb:\x9e\x8dcy\x9f\xfa\xc2\x01\xb5\x94\xda3M\x87\xa0:9`$ed\xb8r\nL6z\xf3\xa4\xe2^0[.x\xa2\xa3\x81\x1aZ\x90\xc4\x99\x83O\x18\xac\xd0\r\xbb\xa3m%\xc1\xc8\x16\xff\xfd:u\x12d\xa0o1+\x19\x12\x1c\xd8F/\xabV\'\t\x8e\xf8\xe7h\x93\xb5\xf6\x95\xb3]\x1c2PV\xb8\x8b\x9e\x9d\xda\xcen\rfT\xcf\x7f\xfa\x03\xa1\x05[\xc6]j\xbdK\xe9\x1c\xb03\x16\xa5)_\x1f\x80p \xf8\xea)$\x82\x16\x9b\x1b\x81\x80\xa6\x92\xfdQt\xc5\xabj\x1f0\x0b\xba\xe8G\xd3\xb52\xc3\xdb\xbdv\x86\xf8\xec(\xdd\xf0\xa5>\x96D>\x97\xf3\xfe\x9c\xf8\x8c @.x\x97\xbd\xd7\xca\xc4$=k\x88~\xd8\\\xe7*\x95q\xf2\x8b\xc3\x18z+%Y\xb4`!\xb5y\xa5$\xd1\xa36\x7f\xc0\x80\xbf\x06`d\xf3\x87\xb0Ab\x03\xae\xbad\x8c\xa5c\x0b\xdc\xa1\xc6\xeabK\xb7ye\xc6\xcf=A\xd2\x96\xc4\x97\x96J-\xa2\xbe\xcb\x0e\x81I\xe8\xb4\xd9YC\x83\xebUT?p\xbd\xd6z\xe9$\x9aD\xc8~EA\xbe\x0c\xd1\xb1+\x8a%~\xd4\xfb\x02q\x07$\x95\xd5\xe7\x83\xa73\xe4\x03\xc0c\n%\x9b\x04\xb2\x000\x1f"\xf0\xa1\xcdyT\xe7\x8d1J\xa3!^\xd5\x8e\xd1O\xc6\x91\xe5\xee?\xbc\x0e#C\xcbP3\xb0\x13\x9b|\xeb4*5i9\xe2S\xa7\x14\x93\x8e\x91\x85\xbb\xad\xb5t\x10\t0O\xeb\xfcy\x1eE\xa8U\xd4%F#\xc3{ztu\xdf\xd3N\xda\xbdZ\x8dX\xaa\x17\x9e\xd2\x15\xfa\xd6bSd\x1d%\xaa=B{\xdc\xc4\xd9\xb8\xcflb\x03\x87/\x166\'\xc4\xde\xb2\xb3!\x9c\x12w\xd0\xc1\xd7,,\x92\xc4\xde\xc4\xf6\xb5\x19\x17\x0e\xc1\x90c\x95\xfb \x9d\xccu\xe1F"\x1e\xa6\xa0v\xdd|\xbe\xdf.E\xfe\x89u\x19&_\x89\xa9\'\xc7\x81\x15#fM\xaf\xc5\xb4\x96\x14\xdc.\xfa\xa7\xd7q.l\xf4j\xe4\xbaW\xcb\xa5\xd2\xa2\xd19{m\xb3\x83_\xc4GJ\xdc\t\xf2B>h\xa1\x11\x86\xee\xd8\xc4\xc6v\x8d\xbb\r\xf4uN\x0cNWw\xdbcc\xb5\xcb\xc7\xb3\x01\xe9\xd9r\xb5\x98\x93\xe2w\x90\x1e\xdf\xe0L\t\\\xf9\\,\x00=\x8eu\xef\xab\xc5pA/\x14\xe1\xaf\x87u\x12\xba\xf9\xa6\xd6\xc4a\x00\xda\xb2\xc7\xca\xf8\xd6\xda**4\x17"OF\x8e\x16\x03\xd6\xe9eL\x9d\xcd\xb2\x17\xe2\xe75\x82\x13T\x954\x89.\xa4\xde\x8b\n?\xf9\xf9\x07\x98\xca\xcb{\x98H\x001\xf8\x1b\xf0\x07c8q\xd63\xe1!\xbf\xdc\x00\xfb\xa1\xf3\xda\x19\xa6C\x863sNy\xdb[[G@>\xfd\xd0j%\xba\x81\x1f\x02\xd8\x9f\xcfr\xd5\x1c-\xe0\x1b\xa4\xbe  Xmm^$\xad\x1aK\x06\xe60\xd1\xf2o\x8a\xf6\x06E\xbfQp\x81~H7\xe2\xf1\xdf\xc6\xd0\xb5\xc9N\xe5-\x9e\xc1\xed\xff+w\x8c\xda\xa1\xfc\rb<\x8bM\xf2.\xb8*\x97\xc1\xd9=Vc\x88\x89\xaf\x08\xdb\x132?\xf5f}\x1a\xdax\x96/\x82\x9d\xd7\xb4!\x84\x8d/\x82\x9d\x89\xe5\xdb\xbf&B&\x97{~8\xc1b\xbc\x13:`\xa8\xcf(\xad\xc7X\\\xcbt\x08L\xb1\xef\xb4\xb4\xd8\xca\xd1yQy\xebe\xbaG\xed\xd4\xfdk8|}\xb3Lf\xee\xb1\xe0\xbe\x82;S\xcf\xf6p]\x89&f\xca\x85a\xd3\x02\x98\xf0\x92\x9c(\x18D\t\xf2\xf6\x1b\xc1\xea\x7f\xe1\xe9\x07\xb1\xd3\x95\x83e\x86\xdf\xab)\x12U \xac\x8aA\xfc5a\xf3\xda;\x82`\x0f\xbeEZ\xf1\xa9s\xf1C\xe9T\xf2\xf5\xe2\xdd8\xf2}\x0c7\xe0\xb8\xf9!\x1aZp\xce\xd8\x9d\xbaO\xf4\xe8\xfc\xfb\x91`\x95\x19\xa8\xaaP\x16=\x89\x99:)\xa5\xba\xa6\xab\xb5\xc6-B\\\x11\xd7\\\xee\x19\\\xdaP\'=\xa5\x00\xfc\x94\xaf\x9d\xf8\t\x00\x0cC\xdf\xd0tF\x88\x99K\x03\xdb\x17rT\xd6\x89\xda\xcd\x1fX\xc2\x11p\xca\xbb\xbe\xd1<?\x1d.\xfd\xfa\x19\'\x8d\xf8\xabA\xd5y\xb7\xc7\xfb\x18\xaa\x9f#FEN\x1b\xd6F6\xea\x9aG\xc5\x1b\xe2U\x17v\x17B\x8f\xf2N\x14B\xb7\xa4> ptO\xff\xfcn@#t=4\xdb\x13\xf9\x08\xb0\x1eU2u\x0ef\x95D\n\xee$\r\x0c\x17\xefF\x1d\xec\x1c@\xe9*j\xfbq\xa3~\xf2Ng\xbf\xca\x0f\xd1n\xed+\x9f\x9e\x17*\xb4g<\xa3\xf9\xaf8\xd7\xb6z\x15\xe7.l\xcd\xbf\xf5\x1a8\x08\xad\xd6\x11\xfd\xa0u\xdc\xcd\xcdN\x99X\x17\xcc\'\xdeHX\xf8:H\xde3\xa9G/R\x92\xd0\xd1\xcc\xe2\xcc\x14\xf1\xdc\xb6[.D$!4\xa8\x0f\xd8\x98\xd1+\xda\xe4%"\x03 \xd0:\xccH#\x1fg\xd7\x95\x10\xa2\x8e.\xee\t8\x81\x14\x80\x95%\xd4bh\xfeN\x9d\x84#\x1b[\x87\xee\x16]\x83\xe9\xfc\xadz\xd9\x19\x84O\x9d\xc9\xb6\xaa\xb4\x01\xc3\x86\xfdz\x95\xf8\xa3\xe1\x8c\x1d4\xb0\x9a\x19`?H@\x8a\xef\xf5Hp6\xccK\xf5\x98\xf1\xc6\xa66\x86\x01k=kL{h2\x89\x04q\x1fc\xc4\x11\xc8\xc6\xd6\xddO\xe5\xa9\r\xc0\x89\xfd\x0e1i\xc7W\x81\xb1\x19\x86\x03ijn\xc2\xc2\x00\xb1"\xe3\xfe\xee\xf4\x8a\x13\x9d\xd7\xc6\x076\x19\x899\x80\x10\xe2|H\x99;\r\xb4\xbf\x92;[\x1e\x9f@\xb8~\xff\xa3\xc0^\xa8\xe82\xe7_\xed6\xfa\xfbr\xa5\xbf\x1eD\xb4\xfc\\o@\xc03\xb0t8\xf6\xfe?\xe3;1&\x0e\x98\x93\xdd\xcb\xdbk\xcb\x85M=aM?]\x9dr\x91\x90\xecxj;\x82\x07\xb5\x85\xb2\x80"\x97}\xf6\x9ft\x06\xff\x0f\xf4\x01\xa9\x94Q\xb1\xc6i\xccl+\xba\xf9!\x93\xfbM\xa4s\x8f\x8e\x1dl\xf9V(YIe\x82\x8b\xebp\r.\x84\xaa\x8eH\xf8\xab\xed\xd5\xbd\xa5d\xdey\x08\xab^KW\x93\x01Y\xbf\x82\xcb\x91\xe7\x9c\x18V1\x95\t\xe6I\xc5\xba\xc1\x96\x8e\x91\xdf\x13\xba\xe3J\x96\xb2a:\xb0\xa7\xeeZF\xb4\x01\xe6\xecNh!\xa8\x83:\x97%\xfbgtK\x0f\xc2\'\xd2\x04\xfe\x05\x1d\x0c\xf7^\xa3^\xa5\xf7\xd8\xc0\x03}s`\xb7_\xcc3H\x14\xc4_5\xe6\xbbQ\xe7qe>\x1aK\x87X\x1a\x90\x03w\xf6\x81/Q\x05+\x9d!\x84\xcf2d\xfe\xf5\x92\xc6\xc0\x9b\xc8\xf2\xbdk\xa4\xa5eE\x03\xd6\x02\xa0\x15_\xd3\x8e\xf8\xcd\xb2\xb2S\x8e#}\xd7\'\xa86\xac9\x0eEQ\xf0\x14\x0f\xe8\xe7n\xbe\x0b5\xdb\xd6\xed,\x9d\x98~"\x18\x9cfd\xbfRb\x17\xfdR+\xfc\xd4\x98-\xf7\x83bh\xa1b\xef/\x06\xca\xf9f\x119EE\x94\x82\x05i.\x14\xaf\xbcV\x1b\xed\xe1;\x9e%\xa9\xb1\xa0J+\xc6\x1ep6x\xa4r\xcf\xf4\xf1\xb6\xfd\x03\x85T\x8b\x98hv\x1f\x80\x9cM\xeeA\xcd\xfb}\x80\x93\xd01\xbe-]7\xa8\x17/f\xf1\x93\x98\x8d\xc0\xde>\x7f\xcap\xe7D\xda\x86\xdf\xd0\xc2\xca\xfb\x00j\xec\xfd6^H\x07\xf2\x84\x92\x8d\xde\xc7\xd7w\xe9CW\x1a\x1fciV\xf0\xde\x9a\xb5\xe3\x98\x0fA\xb1\'\x15o\xa1+\x0cx\t\xaa>\x867,SA\x0bl\x18\xb0a\x90O\xe9\x02?\x89dRT\xb8\xe2@\xcc6\x7fno\xe1\xf2\x9a\xfe\xe6\x92Dy\x9eO\xaaW\xbd4\xfd\x88\x89\'D\x99\xc0\x93\xf0\xd7\x9b\x00 G\xf4\x8a\xaa\xaa\xcc\xe1\x8fr\xc3\xd5\xcf$\xea7\xbf{@\x9c\xdc\xf2/n\xe2Vu\xd6e\xec\x88\xb0\xb5\xaa&r\xa1\x0b\x11\x7f\x1fi\xfa\xc6C\x8c qYu\x9bW\xcb\xc6T\xcc\x84\xb0\x1e\xb9\xf5eYS9\x82.U\x97[\xbc\xcdNq1\x90t \xf6\xc4\xfdn\xee\x9f\x9c\x0f5\xf0\xca\xfc\xd0\xd2\xf9W_o\x98\x10\x07\x1e\xbb\xf4\xae\x7f\x89w~\x7f#\x1b<2d\xfdOh\xd9!\xc6aP\x002\x05\x15U\xad6\xae]C\xf8?\xdd\x9cq\xc9\x81w\xd8\xdc3\x8f\x96\xae\x10\xf4\x9d\xe5F9\xb4q\xd4\xfd\xda\x17Gy\xdf\xf5\x84\xc71\xab\x80T\xbc7\\\xc8\x81\x95\xca\xfe\xcf\xfe\xe7?s\x7f\x1d\x04JW(b>\xda\xa4\xed\x12\r\x12\xe0\xa7=\x0cO\xde\x9c>\x11\xab\xc6Ez:JH\xff\x9e\x8f\x87\xf6\xfe\x83\x86|\xb7\xe7\xfaH\x0c\xe7zhN\xc6\xa2\r\xd8^\xf4C\x86\x0e`\xe5=>(\x90\x11<\x8bC\x08\x9e\x00\x04\x1b[*K-\x92s\xba\x19,\xb3}\x1f!\x8b\xba\xf5.i\x1c9E\xffe\xc2r\x94\x15\xa6\x91-\x8e\x15\x9brlk\x98W\xa3{v"M\x10\x96i\xb7!\x11\x85\xd91\xde\xb4\xe1\xe29\xff@6\x1f\xd9\xca\x7f\xde+\x8d\xc2E\x1e=\x8b\x1ch\x9f\x9al\xb1z?\xc7\xf0)x\xb7\xe3\xf3:S\xd0O\xf7v\x85\xa1\xbd\xdb{\xdf\xfc\xe9\xb3<\t>\xd4\xd5\xab\xcfD"}\x00\xc8\xd3\x14\xeb\xda]\x1c\x8e^\x00\xe9*n\x9d\x81671\x9a\'\xe1\x85\xd0[f\xdb#Gq\t<\x19\xf63\x86\x0e\x84\x16\x84\xb6\x0c= a08g\xd3|x\x99![\xdfq]>\xafSkF\xdc\x0b\x95\x92\xb7\xce.\xe2\x82\xbf\xdf\xea\xa2\x9d\xc8-434\xac^\xa6\xe3:\xbftqiePh\xb4\x9a\x86\x08\xe8\'\xa1Y\xa4Q\xf9:\xaag\x8a\xe1\x8a\xa4\x13\xc1\xda\xcd2\x89\xc8\ng\x8c\xf83\xaf\xfe+\xb6b\xf2\x9b\x0f\x9e\xb7\x96opa\xc2\x95\x19\x00\xe8>\xf6w\xe7[\xd5\x9c\xb8\x02\xdaG\x966%\xfe%\x00~iW\xad\xd7\rV1\xed\xcd\xdaz\xa7\x7f\xde\xfa>VC\\\xfa\xf0tdH\x05\x0b\xfc<\x9e\xc2\xb5\x92\x02L\xb2,\xb2@\xb2C\x95Z\xefk\xae\xfex\x9b\x89C\xabn\xe7\xe7\xea\xb3\xe5\xeb\xd0\xe1I.\xe3E\x88\xf2\xf3\xe6\x0b09\xf5\x14 \xeeI\xdc\x0b\x88_d\xb4\x89F\xe19\xe6\x97X\xc8eo+\xf8E\xf9v\xc5\x97\x03X \xee\x9dc-\xbf\xf5\x95\xb9\xa3Y\xaf4H\xae\xd8=td\x10\xcc\x1e\x039,`\xc1\x16\xc7\xbez\'\xb4\xf9CJ\x95\x96\x7f\x0e\xc2,&\xd9\x10\xc4\\\xc0\x01\xf8#\\Y\xf2V\x198\xab\x88\x00i\xf1T\xdd\xdcU\x97\xa9\xb3\xfc\x0fPAF\x8b\x98@\xf9\xfc\t!\x1eu\\\x1f\xce\x994\x84\x84\x91=\xb9zb\x01\xbb+\x18U7\xe4\xe5\xccK\xfc^E\x03c^\x8a\xaeE-\x01\xd3f\xcd.bZ3\xa4T\x80\xd6\xb1\x05\xedYmL\x8f\x9e{\x89\x8c\x0e\xfc\xb4w\xb0\xda)\x7fr\xe2\x82\xde9:\xfc\xccd\xbd\x0b\xaf\xc9\xe5\xe0\xc0\xf7M\xa7^\xd15\xaf\x04G2\x96\xc8\xe1\x81\xf0\xc0\xec\xf7\xa30\x85\xebuI\x94/\xe2~,\xc4\xf5\xcb+\\*\x93E]h_\x99\x14\xb6\xba\xde\x12Z\xf2J\xfb\xd9\x96\x1b\xbd\xcfh\x94:\xd7\xbf$\xe4\x95\x88Pj\xf5\x83\t\x0fH55k\x94\xff\xa6\x1b\xa9\xa5\xd9\x9e\x08t\xe6q\x93\xad\xef\x03\xeadW\xb1\xa4\'\x11j\xf4/\xde%A\xbc\x16@\xdca\x8a\x97\xdclN\xf5\x14\x1b\xef\xab\x88r\x90t*\x87\x8e\x82G\xd3zx\xa9\xc5\x98u\xe1\xc0\xc9o\xa1\xd9B\xdd\xb6\xd5\xaap\x1a\xb0|\xb8sU\xe7P\xe9P\xdd\xde\x04\x8a\x999n\xcaF\xed\xd8\xaa\x08\x9d\xa0\xed\xeb\xa1\xc6\x0b\x9f\xedK\xaa|d\xcco\x8b\xa7\x97Sk\xfb\x19\xdd_X<:5\xd9S^\x7f\xdb\x98y\xbb!\xe0\x05_\xafi\xdb,\xf5\x87zX<\xceq\x81\x0c}&\x0b\xa6\xa0\xe6\x17\x9b\xa3\xa9=\xe4H\xa3\xecR\xac\xed fv\x82\xb5\x11\n\x90\x96\xbb\x99\xa7\xa5\xd8\xae_\x83\xfe\x9f\'}\xab\xc53w\xf8\xd9\xeb\xf6p\xcf8\xc8#\xbb\x8d?#\x14\x0b\n\x0c\xa8&\x89\xb9\x08\xb6\xda\xab\xc3\x1dj\xb5,9;\xd1\xd6~\x97\xd4\x1a\xb55u\x84\x90\x18f%\xbf\xa6@WW\x1es\xa7*\xb5gr\xb6!"C\x15`\x9c\xd1\x15\x13\xad\x0b\xa9w\xca`\xec\xaf\x19\xc8x\x83\xe3\xc9\xe7\xc6z\xb4z\xdc;\xa7\xd2e\xb4e\x83\xfd\x85\xc3\xd1\x12\x08x$;g\x1d\xd8^\x98\x1e:~\xfa\x8fD\xe8w\xce\xe2H\xd8\xe0u\xac\x1b\x94\xe8\xb2o=\\~\xf7\x8b\xfd\xd9\x89@\xb4ul\x00<"\x88\xc8\xe7\xef\xf9\x15>-yB\xc2\x8d\xe4\xb1\xb7\xba1\xc1j\xbc\xc1v\x08\xe8\x0fw\x85\xeeTd\xf9g\xa5huD\x1c%\xc5C\x02\xd4\xc2\'\x1f\x94q\xdco\xdd\xaf.?\xc1Z\xe5\x0fB\xad\x8f\xc2\xf9\xab3\xe5\xa6\\\x1cz\x03\xc8\x9b\x9e\x94E8k\xf6c\xe2\xb3\xc4\xa8m~)I;Q*P/\x9eF\xac\xfb\xacp\xb6\xe8|\xdf:(\xf4>\xd7\x0f\x19\x80\x98NC\xa0\x7f\xdb\x8b\x01\xb6\t\xd8!8\x94\xf3o\x16\xa3\x86\xe0h\x08\xe5q\xc9\x0eT\xc2\xcdp9\xe2\x837K\xf8\x9a\t\x80\xba\x03\xad\x92\x83\x81\xa6\xca\xbab\x17\xa0\xc0\x01L\xfe\xcc\x02Y\xb6m\xb4u\x9ccd\xedn-\xbb!1\xd6\xa5i\x9dg\x84\xb7WV\xf2\xf8Mo!\x96\xa6\x98\xde\xbf\xa7A\x86\xb8\x95\xe5\x0bo\xbe\xcd\x9d\x1f&1\xff--*\xf4\x02\xe5\x16\xe5\xb9\xb7\xe5p2}O\x12i\xfb\x06\xb5\xb7\x9b\xc8nJ\xf2\x18\xcaFy\x88Z\x06\x11[\x83s\xbdG|+h`\x91\xdcI\xb9\xfc\x9d\xa7`/\x04\xc7\xd3\xb3E\xce\xb1\x01\xbe\xde\x8c\xab\xf2\xcb6w\x08\xf9j\xae\x8bSR\x04\xfe\x9e\xd0\x035\xa4\x070\x9e\xd7\xcc\xec6\x08\x05_\xfa/\x7f\xaf\xf4\xdc\xb5\xf9\xf1\xb8\x94~\x13\x94&\x1f\x0b\xfa\t(\xf3\x88\xa4\x15\xfd\'\xb8\xb3m%\xd4\xfdr\x85\xfe\x91M\x80\x04\x1d\x13\xc7.\x17\xc8\xe2\xac\xe5\xa9g*b\x9b\xb2\x8d_\x99\xef\xa5\xc3\x17\xe7T\xff\x7f\x06G\x11Q\xf4\x0c\xcb\x1d\xf5#\xa2K\xda\x7f7\xae<\x11C\'Z\x1d8\x95\x9b\xe4\xaa@\xfc\xdb\xa2#\xaa\xfe=\xb1_\xec.V"\xba\xcd\xba6z\x0e\xd5\xd4\x88\xa0\xa8\x9f=\xb8\x80\xaf\xa5\xd1+`Pm\x9c\xc2t\xc5\xec/\xd1\x15\xa3\xaa\xf7C/2\xd3\\1\xab\x99\xd1\x99pL\xd4\xd9\xd4\x87\xd4\x99\x8eG\x08\x85\n6\x85\x89\x86\xa2\x0cy\xbd]\x1e\x89\x98\'E\x94\x1a\xa6\x0c\x9a7\x8d\xf8\x94\xdd\xc4\x99\x85\xdc|wf\xe1\xcfqw\xd6N\x0fTA:\xbe\x7f$\xae\xcc\xe4U\xc1\x1e\xadn\x9c\x8e~\x1f5g\xb7\x84\xce\xe7K\xe7/N\xfe\x81S\xae\xd3\x84\xc3\xbdn\x94[vi\x1a\xe3\xc3\xc9\x05l>\xb3R\xab}\x05dF\xcaU*q\x0b\xda/v:l\x86\xf2\xf8!h\xf7\xcbC\xff\x9a\xeb}\xa9\xd8\x92\xc2\x94\x9d\x0fO\x01,\x0e\xf4+/\n\xb2\xa0\xb1\xb3;\x03U\xee\x0b\x9a=&\x15\xc3\x83\xd6\xa5\xdaS\x92\x00\xdbZ\x99o?\xa1_\xa1\xe0\xe0\xe2[#"\xb5}\xe7\x13>u\xc2\x99\xe5\x90\x92\xe9\x95\xaf\xdc.\xc7V\xf9y`\x07P\xb2\xc3\x93,\xa8\xb7\x91\xf5\xd3\xe7X\x88\xa4\x02E\xcf\x9dh\xdeX]]\xbe\xb4\xb0\xd4w\xedw\x0f\x96\xe8\t\xd3\x86\xf1\x9d\xf8\x15]\x86\xf9_\xfc\x9b\x12\xeeT\xeb\x85J4\xf7\x08\xf0\x83=\xb6\xc57\xf8`B -\xc1\xe3NZ\x07\xab\x15+j\xe8\xa89\x9b\xd5\xb2\xe2\x12\x8e\xc8\xc82\xb9X\x0c\x95!\xc7\xbd\xd1y\xd3\xbc\xf9\xe7\xf3l\xed>\x00\xcfV12\xc0\x0cA\x1a\xbc\xfc\xb0A\xfe\x90cVI\x18\x81\'\x0b\x80\xab"\xb2\x81s>T\xf2~\xbf{\xc0\x1c\xf4\xa1O\xc43\xf7/\n\xa1\x9bA+\xf1;\x04\xc0\x18G@\xe5\xd7}\x88\xe5W\n\xb4\xf9\xd4L\x97OV\xd8\xc6\xad\x16J4\xfc\x89H\xa4\x99s@\x9a\x9dg\xfa\xec\x13\xd4\rn\x15\xd8\xdb\x08\xe1zKL\xea\x13\xf8S\xb69\x08>\xab5\xae\xf6c]s\xe1\\E\xca\xf7/\xc23\xe6\xf4\x08\xe1u\xe3\xd3PVk \x04]\x0e\x81\xb9\x9f\xf8E\xff\xff\xf7\'DH\xab'

    # sdata = pipe(cn, bid1, sdata, [{"op": "decrypt"}]) #, tsp='signature'
    # print('w', sdata)
    # print(meta)

    # # f = open("sdata.txt", "wb")
    # # f.write(sdata)
    # # f.close()
    #
    (rdata, meta) = unwrap(cn, bid1, sdata) #, tsp='signature'
    print('r', repr(rdata))
    # print(meta)
    #
    # exit()
    #
    # bid1 = 'fa2fd58177f686c36d87a26ff2ce91e33cc721d8e8ddcab74076c912ed5b1674'
    # data_test = b'<?xml version=\'1.0\' encoding=\'windows-1251\'?>\n<ZREP xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="check01.xsd">\n  <ZREPHEAD>\n    <UID>8bd266f2-28ba-11eb-8e51-0123be5354a8</UID>\n    <TIN></TIN>\n    <ORGNM></ORGNM>\n    <POINTNM></POINTNM>\n    <POINTADDR></POINTADDR>\n    <ORDERDATE>17112020</ORDERDATE>\n    <ORDERTIME>115203</ORDERTIME>\n    <ORDERNUM>385</ORDERNUM>\n    <CASHDESKNUM></CASHDESKNUM>\n    <CASHREGISTERNUM>4000042829</CASHREGISTERNUM>\n    <VER>1</VER>\n    <ORDERTAXNUM>1</ORDERTAXNUM>\n  </ZREPHEAD>\n  <ZREPVAL>\n    <TOTALINADVANCE>0.00</TOTALINADVANCE>\n    <TOTALINATTACH>0.00</TOTALINATTACH>\n    <TOTALSURRCOLLECTION>0.00</TOTALSURRCOLLECTION>\n    <COMMISSION>0.00</COMMISSION>\n    <CALCDOCSCNT>12</CALCDOCSCNT>\n    <ACCEPTEDN>0.00</ACCEPTEDN>\n    <ISSUEDN>0.00</ISSUEDN>\n    <COMMISSIONN>0.00</COMMISSIONN>\n    <TRANSFERSCNT>0</TRANSFERSCNT>\n    <DETAILS>\n      <ROW ROWNUM="1"><VALCD>840</VALCD><VALSYMCD>USD</VALSYMCD><BUYVALI>6.00</BUYVALI><SELLVALI>0.00</SELLVALI><BUYVALN>0.00</BUYVALN><SELLVALN>163.20</SELLVALN><STORBUYVALI>6.00</STORBUYVALI><STORSELLVALI>0.00</STORSELLVALI><STORBUYVALN>0.00</STORBUYVALN><STORSELLVALN>163.20</STORSELLVALN><CINVALI>0.00</CINVALI><COUTVALI>0.00</COUTVALI><COMMISSION>0.00</COMMISSION><INADVANCE>0.00</INADVANCE><INATTACH>0.00</INATTACH><SURRCOLLECTION>0.00</SURRCOLLECTION><STORCINVALI>0.00</STORCINVALI><STORCOUTVALI>0.00</STORCOUTVALI><STORCOMMISSION>0.00</STORCOMMISSION></ROW>\n    </DETAILS>\n  </ZREPVAL>\n  <ZREPBODY>\n    <SERVICEINPUT>0.00</SERVICEINPUT>\n    <SERVICEOUTPUT>0.00</SERVICEOUTPUT>\n  </ZREPBODY>\n</ZREP>\n'
    #
    # sdata = pipe(cn, bid1, data_test, [{"op": "sign", "role": "stamp", "tsp": "signature"}])
    # # print('w', sdata)
    # (rdata, meta) = unwrap(cn, bid1, sdata, ocsp=None)
    # print('r', repr(rdata))
    # print(meta)


    # #key2
    # key_path = './test-keys/2/Key-6.dat'
    # password = '39307260'
    # keys = unpack_key(cn, **read_key1(key_path, password))
    # # print(keys)
    # bid2 = init_box(cn)
    # print(bid2)
    #
    # # exit()
    # for key in keys:
    #     add_key(cn, bid2, key['contents'].encode('latin1'))
    #     break
    #
    # certpath1 = './test-keys/2/CertificateSN9099832.cer'
    # certpath2 = './test-keys/2/CertificateSN9099833.cer'
    #
    # for cert in read_certs(certpath1, certpath2):
    #     add_cert(cn, bid2, cert)
    #     break
    #
    # #key3
    # key_path = './test-keys/3/Key-6.dat'
    # password = 'tect4'
    # keys = unpack_key(cn, **read_key1(key_path, password))
    # # print(keys)
    # bid3 = init_box(cn)
    # # print(bid3)

    # exit()
    # for key in keys:
    #     add_key(cn, bid3, key['contents'].encode('latin1'))# с базы послать
    #     break
    #
    # certpath1 = './test-keys/3/Тестовий_платник_4_(Тест)-8101905.cer'
    # certpath2 = './test-keys/3/Тестовий_платник_4_(Тест)-8101906.cer'
    #
    # for cert in read_certs(certpath1, certpath2):
    #     add_cert(cn, bid3, cert)
    #     break

    # evict_box(cn, bid1)
    #
    # s_time = time.time()
    # for x in range(1):
    #     # time.sleep(20)
    #
    #     # for cert in info(cn, bid):
    #     #  print('c', cert)
    #
    #     data_test = 'HELLO {}'.format(x)
    #
    #     sdata = pipe(cn, bid1, data_test.encode('utf8'), [{"op": "sign", "role": "stamp"}])
    #     # print('w', sdata)
    #     (rdata, meta) = unwrap(cn, bid1, sdata, ocsp=None)
    #     print('r', repr(rdata))
    #     print(meta)
    #
    #
    #     # i = info(cn, bid1)
    #     # print(i)
    #     #
    #     # sdata = pipe(cn, bid2, data_test2.encode('utf8'), [{"op": "sign", "role": "stamp"}])
    #     # # print('w', sdata)
    #     # (rdata, meta) = unwrap(cn, bid2, sdata, ocsp=None)
    #     # print('r',repr(rdata))
    #     # i = info(cn, bid2)
    #     # print(i)
    #
    #     # sdata = pipe(cn, bid3, data_test3.encode('utf8'), [{"op": "sign"}])
    #     # # print('w', sdata)
    #     # (rdata, meta) = unwrap(cn, bid3, sdata, ocsp=None)
    #     # print('r',repr(rdata.decode()))
    #     # # i = info(cn, bid3)
    #     # # print(i)
    #     #
    #     # print(meta)
    #     # info(cn, bid)
    #     # evict_box(cn, bid1)
    #
    #     # if rdata.decode('utf8') != data_test:
    #     #  print('boooo')
    #     #  break
    #
    # total_time = time.time() - s_time
    # print('time', total_time, (x*9 + 1) / total_time)


if __name__ == '__main__':
    frame = connect(*sys.argv[1:])
